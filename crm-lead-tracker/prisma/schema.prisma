// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  name           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  clients        Client[]
  buyers         Buyer[]
  alerts         Alert[]
  files          File[]
}

model Client {
  id             String   @id @default(cuid())
  name           String
  businessName   String
  businessType   String   // care home or care agency
  email          String?
  phone          String?
  address        String?
  notes          String?
  status         String   @default("active") // active, inactive, sold
  askingPrice    Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  
  processes      Process[]
  alerts         Alert[]
  images         Image[]
  files          File[]
  clientBuyers   ClientBuyer[]
}

model Buyer {
  id             String   @id @default(cuid())
  name           String
  email          String?
  phone          String?
  company        String?
  budget         Float?
  requirements   String?
  status         String   @default("active") // active, inactive
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  
  clientBuyers   ClientBuyer[]
  files          File[]
}

model ClientBuyer {
  id             String   @id @default(cuid())
  clientId       String
  buyerId        String
  status         String   @default("interested") // interested, negotiating, offer_made, rejected, completed
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  buyer          Buyer    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  
  @@unique([clientId, buyerId])
}

model Process {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         String   @default("pending") // pending, in_progress, completed
  dueDate        DateTime?
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  clientId       String
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Alert {
  id             String   @id @default(cuid())
  title          String
  description    String?
  type           String   @default("info") // info, warning, urgent
  dueDate        DateTime?
  isCompleted    Boolean  @default(false)
  completedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  
  clientId       String?
  client         Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Image {
  id             String   @id @default(cuid())
  url            String
  filename       String
  size           Int
  mimeType       String
  createdAt      DateTime @default(now())
  
  clientId       String
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model File {
  id             String   @id @default(cuid())
  filename       String
  url            String
  size           Int
  mimeType       String
  shareableLink  String?  @unique
  isPublic       Boolean  @default(false)
  createdAt      DateTime @default(now())
  
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  
  clientId       String?
  client         Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  buyerId        String?
  buyer          Buyer?   @relation(fields: [buyerId], references: [id], onDelete: Cascade)
}
